#resources:
#  repositories:
#    - repository: templates
#      type: github
#      endpoint: piomin
#      name: piomin/azure-pipelines-templates
#      ref: refs/heads/master

trigger:
- master

pool:
  name: Azure Pipelines

#stages:
#  - template: dotnet-library-stage.yml@templates
#    parameters:
#      projectPath: 'src/WebApi.Library/WebApi.Library.csproj'
#      testProjectPath: 'tests/WebApi.Library.Tests/WebApi.Library.Tests.csproj'
#      feedName: 'pminkows'

stages:

  # -----------------------------
  # Stage 1: Build
  # -----------------------------
  - stage: Build
    displayName: "Build Stage"
    jobs:
      - job: BuildJob
        displayName: "Build WebApi.Library"
        steps:

          - task: UseDotNet@2
            displayName: 'Init'
            inputs:
              version: '9.x'

          # Step 1: Prepare SonarQube analysis
          - task: SonarCloudPrepare@3
            displayName: "Prepare SonarQube Analysis"
            inputs:
              SonarQube: 'SonarCloud'   # Replace with your service connection
              scannerMode: 'dotnet'
              organization: 'piomin'
#              configMode: 'manual'
              projectKey: 'piomin_webapi-library'
              extraProperties: |
                sonar.projectBaseDir=$(Build.SourcesDirectory)/src/WebApi.Library
                sonar.qualitygate.wait=true
#              extraProperties: |
#                sonar.projectBaseDir=$(Build.SourcesDirectory)/src/WebApi.Library
#                sonar.organization=piomin

          # Step 2: Build the library
          - task: DotNetCoreCLI@2
            displayName: "Build WebApi.Library"
            inputs:
              command: 'build'
              projects: 'src/WebApi.Library/WebApi.Library.csproj'

          # Step 3: Run tests (optional, without coverage)
          - task: DotNetCoreCLI@2
            displayName: "Run Tests"
            inputs:
              command: 'test'
              projects: 'tests/WebApi.Library.Tests/WebApi.Library.Tests.csproj'
              arguments: '-c Release'
              publishTestResults: true
              testRunTitle: 'Unit Tests'

          # Step 4: Analyze with Sonar
          - task: SonarCloudAnalyze@3
            inputs:
              jdkversion: 'JAVA_HOME_17_X64'
            displayName: "Run SonarQube Analysis"

          # Step 5: Publish results to Sonar
          - task: SonarCloudPublish@3
            displayName: "Publish SonarQube Results"
            inputs:
              pollingTimeoutSec: '300'
            condition: always()

# -----------------------------
# Stage 2: Optional Deploy (if needed)
# -----------------------------
# - stage: Deploy
#   displayName: "Deploy Stage"
#   dependsOn: Build
#   jobs:
#   - job: DeployJob
#     pool:
#       vmImage: 'windows-latest'
#     steps:
#       - script: echo "Deploy step goes here"
